which(abs(temp) > 10)
out = which(abs(temp) > 8)
out
abs(temp) > 8
out
apply(abs(temp) > 8, mult)
apply(abs(temp) > 8, 1, mult)
apply(abs(temp) > 8, 1, prod)
apply(abs(temp) > 8, 1, +)
apply(abs(temp) > 8, 1, sum)
which(apply(abs(temp) > 8, 1, sum))
which(apply(abs(temp) > 8, 1, sum) > 0)
acp = prcomp(data)
acp
plot(acp)
biplot(acp)
names(acp)
acp$sdev
acp$rotation
acp$center
acp$scale
acp = princomp(data)
acp
plot(acp)
names(acp)
acp$loadings
acp$scores
biplot(acp)
plot(acp$scores)
acp$sdev
plot(acp$scores * acp$sdev)
plot(acp$scores * acp$loadings)
acp
names(acp)
acp$loadings
as.matrix(acp$loadings)
as.dataframe(acp$loadings)
as.data.frame(acp$loadings)
as.data.frame(acp$loadings)[1:4,]
acp$scores * as.data.frame(acp$loadings)[1:4,]
acp$scores
as.data.frame(acp$scores) * as.data.frame(acp$loadings)[1:4,]
plot(as.data.frame(acp$scores) * as.data.frame(acp$loadings)[1:4,])
plot((as.data.frame(acp$scores) * as.data.frame(acp$loadings)[1:4,])[,1:2])
plot(acp)
biplot(acp)
plot((as.data.frame(acp$scores) * as.data.frame(acp$loadings)[1:4,])[,1:2])
plot(acp$scores)
plot(acp$scores, col = c("red", "blue")[out])
apply(abs(temp) > 8, 1, sum) > 0
plot(acp$scores, col = c("red", "blue")[apply(abs(temp) > 8, 1, sum) > 0])
c("red", "blue")[apply(abs(temp) > 8, 1, sum) > 0]
c("red", "blue")[c(1,0,0,1)]
c("red", "blue")[c(1,2,1,1)]
out = (apply(abs(temp) > 8, 1, sum) > 0) + 1
out
plot(acp$scores, col = c("red", "blue")[out])
out = (apply(abs(temp) > 10, 1, sum) > 0) + 1
plot(acp$scores, col = c("red", "blue")[out])
plot(acp$scores, col = c("blue", "red")[out])
biplot(acp$scores, col = c("blue", "red")[out])
plot(acp$scores, col = c("blue", "red")[out])
data * cor(data)
data %*% cor(data)
matrix(data) %*% cor(data)
as.matrix(data) %*% cor(data)
cor(data)
cor(data)
biplot(prcomp(matrix(data) %*% cor(data)))
biplot(prcomp(as.matrix(data) %*% cor(data)))
iris
iris[,-5]
kmeans(iris[,-5], k = 1)
kmeans(iris[,-5], centers = 1)
r = kmeans(iris[,-5], centers = 1)
r
r$totss
r$withinss
for (k in 1:10) {
r = kmeans(iris[,-5], centers = 1)
print(r$tot.withinss)
}
r = kmeans(iris[,-5], centers = k)
for (k in 1:10) {
r = kmeans(iris[,-5], centers = k)
print(r$tot.withinss)
}
for (k in 1:10) {
r = kmeans(scale(iris[,-5]), centers = k)
print(r$tot.withinss)
}
for (k in 1:10) {
r = kmeans(scale(iris[,-5]), centers = k, nstart = 30)
print(r$tot.withinss)
}
w = []
for (k in 1:10) {
r = kmeans(scale(iris[,-5]), centers = k, nstart = 30)
print(r$tot.withinss)
w[k] = r$tot.withinss
}
w = c()
for (k in 1:10) {
r = kmeans(scale(iris[,-5]), centers = k, nstart = 30)
print(r$tot.withinss)
w[k] = r$tot.withinss
}
w
r2 = (w[1] - w) / w[1]
r2
psf = (r2 / (0:9)) / ((1 - r2) / (150 - 1:10))
psf
data.frame(k = 1:10, w = w, r2 = r2, psf = psf)
res = lapply(1:20, function(k) return(kmeans(scale(iris[-5]), k, nstart = 20)))
r2 = sapply(res, function(r) return(r$betweenss / r$totss))
psf = sapply(res, function(r) {
r2 = r$betweenss / r$totss
k = length(r$size)
n = sum(r$size)
if (k == 1) return(NA)
(r2 / (k - 1)) / ((1 - r2) / (n - k))
})
data.frame(
k = rep(1:20, times = 2),
critere = rep(c("R2", "Pseudo-F"), each = 20),
valeur = c(r2, psf)
) %>%
ggplot(aes(k, valeur, color = critere)) +
geom_vline(xintercept = 3, lty = 2, color = "grey50") +
geom_line(show.legend = FALSE, size = 2) +
facet_wrap(~ critere, scales = "free") +
theme_classic()
setwd("~/Documents/GitHub/cours-2024-2025/intechmer-3a-add-tests")
data.frame(cor(donnees)) %>%
mutate_all(~cell_spec(round(.x,2), bold = .x > .75)) %>%
kable(escape = F, align = "r") %>%
kable_styling()
knitr::opts_chunk$set(echo = FALSE, fig.align = "center")
library(kableExtra)
library(tidyverse)
library(formattable)
affTable <- function (tab, nrow = 8, ncol = 8, digits = 2) {
formattable(
round(tab, digits),
list(
area(1:nrow, 1:ncol) ~ color_tile("lightsalmon","lightblue")
)
)
}
knitr::include_graphics("https://upload.wikimedia.org/wikipedia/commons/6/64/Dualite.jpg")
donnees = read.table(text = "Etudiant & Math & Phys & Fran & Angl
jean &  6.00 &  6.00 &  5.00 &  5.50
alan &  8.00 &  8.00 &  8.00 &  8.00
anni &  6.00 &  7.00 & 11.00 &  9.50
moni & 14.50 & 14.50 & 15.50 & 15.00
didi & 14.00 & 14.00 & 12.00 & 12.50
andr & 11.00 & 10.00 &  5.50 &  7.00
pier &  5.50 &  7.00 & 14.00 & 11.50
brig & 13.00 & 12.50 &  8.50 &  9.50
evel &  9.00 &  9.50 & 12.50 & 12.00", sep = "&", header = T, row.names = 1)
knitr::kable(donnees, row.names = T)
knitr::kable(data.frame(Moyenne = apply(donnees, 2, mean),
Variance = apply(donnees, 2, var)),
digits = 2)
data.frame(cor(donnees)) %>%
mutate_all(~cell_spec(round(.x,2), bold = .x > .75)) %>%
kable(escape = F, align = "r") %>%
kable_styling()
data.frame(cor(donnees)) %>%
mutate_all(~cell_spec(round(.x,2), bold = .x > .75)) %>%
kable(escape = F, align = "r") %>%
kable_styling()
data.frame(cor(donnees)) %>%
mutate_all(~cell_spec(round(.x,2), bold = .x > .75)) %>%
kable(escape = F, align = "r") %>%
kable_styling()
data.frame(cor(donnees)) %>%
mutate_all(~cell_spec(round(.x,2), bold = .x > .75)) %>%
kable(escape = F, align = "r") %>%
kable_styling()
data.frame(cor(donnees)) %>%
mutate_all(~cell_spec(round(.x,2), bold = .x > .75)) %>%
kable(escape = T, align = "r") %>%
kable_styling()
data.frame(cor(donnees)) %>%
mutate_all(~cell_spec(round(.x,2), bold = .x > .75)) %>%
kable(escape = T, align = "r") %>%
kable_styling()
data.frame(cor(donnees)) %>%
mutate_all(~cell_spec(round(.x,2), bold = .x > .75)) %>%
kable() %>% # escape = T, align = "r") %>%
kable_styling()
data.frame(cor(donnees)) %>%
# mutate_all(~cell_spec(round(.x,2), bold = .x > .75)) %>%
kable() %>% # escape = T, align = "r") %>%
kable_styling()
data.frame(cor(donnees)) %>%
round() %>%
# mutate_all(~cell_spec(round(.x,2), bold = .x > .75)) %>%
kable() %>% # escape = T, align = "r") %>%
kable_styling()
data.frame(cor(donnees)) %>%
round(2) %>%
# mutate_all(~cell_spec(round(.x,2), bold = .x > .75)) %>%
kable() %>% # escape = T, align = "r") %>%
kable_styling()
data.frame(cor(donnees)) %>%
round(2) %>%
mutate_all(~cell_spec(.x, bold = .x > .75)) %>%
kable() %>% # escape = T, align = "r") %>%
kable_styling()
data.frame(cor(donnees)) %>%
round(2) %>%
mutate_all(cell_spec(.x, bold = .x > .75)) %>%
kable() %>% # escape = T, align = "r") %>%
kable_styling()
data.frame(cor(donnees)) %>%
round(2) %>%
mutate_all(~cell_spec(.x, bold = .x > .75)) %>%
kable() %>% # escape = T, align = "r") %>%
kable_styling()
data.frame(cor(donnees)) %>%
round(2) %>%
mutate_all(~cell_spec(.x, bold = .x > .75)) %>%
kable(escape = F) %>% # escape = T, align = "r") %>%
kable_styling()
data.frame(cor(donnees)) %>%
round(2) %>%
mutate_all(~cell_spec(.x, bold = ifelse(.x > .75, TRUE, FALSE))) %>%
kable(escape = F, align = "r") %>%
kable_styling()
data.frame(cor(donnees)) %>%
round(2) %>%
#mutate_all(~cell_spec(.x, bold = ifelse(.x > .75, TRUE, FALSE))) %>%
kable(escape = F, align = "r") %>%
kable_styling()
setNames(as.data.frame(addmargins(acp$ind$contrib, 1)), paste("contrib", 1:4)) %>%
round(.1) %>%
#mutate_all(~cell_spec(round(.x, 1), bold = .x > 100/9)) %>%
kable(escape = F, align = "r") %>%
kable_styling()
knitr::opts_chunk$set(echo = FALSE, fig.align = "center")
library(kableExtra)
library(tidyverse)
library(formattable)
affTable <- function (tab, nrow = 8, ncol = 8, digits = 2) {
formattable(
round(tab, digits),
list(
area(1:nrow, 1:ncol) ~ color_tile("lightsalmon","lightblue")
)
)
}
knitr::include_graphics("https://upload.wikimedia.org/wikipedia/commons/6/64/Dualite.jpg")
donnees = read.table(text = "Etudiant & Math & Phys & Fran & Angl
jean &  6.00 &  6.00 &  5.00 &  5.50
alan &  8.00 &  8.00 &  8.00 &  8.00
anni &  6.00 &  7.00 & 11.00 &  9.50
moni & 14.50 & 14.50 & 15.50 & 15.00
didi & 14.00 & 14.00 & 12.00 & 12.50
andr & 11.00 & 10.00 &  5.50 &  7.00
pier &  5.50 &  7.00 & 14.00 & 11.50
brig & 13.00 & 12.50 &  8.50 &  9.50
evel &  9.00 &  9.50 & 12.50 & 12.00", sep = "&", header = T, row.names = 1)
knitr::kable(donnees, row.names = T)
knitr::kable(data.frame(Moyenne = apply(donnees, 2, mean),
Variance = apply(donnees, 2, var)),
digits = 2)
data.frame(cor(donnees)) %>%
round(2) %>%
#mutate_all(~cell_spec(.x, bold = ifelse(.x > .75, TRUE, FALSE))) %>%
kable(escape = F, align = "r") %>%
kable_styling()
library(FactoMineR)
acp = PCA(donnees, graph = FALSE)
knitr::kable(round(setNames(data.frame(acp$eig), c("Valeur propre", "Variance (%)", "Cumulée (%)")), 2), row.names = TRUE)
par(mar = c(2, 2, 1, 1) + .5)
barplot(acp$eig[,2])
plot(acp)
plot(acp, choix = "var")
setNames(as.data.frame(addmargins(acp$ind$contrib, 1)), paste("contrib", 1:4)) %>%
round(.1) %>%
#mutate_all(~cell_spec(round(.x, 1), bold = .x > 100/9)) %>%
kable(escape = F, align = "r") %>%
kable_styling()
setNames(as.data.frame(addmargins(acp$ind$cos2, 2)), c(paste("qualité", 1:4), "Somme")) %>%
round(2) %>%
# mutate_all(~cell_spec(round(.x, 2), bold = .x > .25)) %>%
kable(escape = F, align = "r") %>%
kable_styling()
setNames(as.data.frame(acp$var$contrib), paste("contrib", 1:4)) %>%
round(1) %>%
# mutate_all(~cell_spec(round(.x, 1), bold = .x > 25)) %>%
kable(escape = F, align = "r") %>%
kable_styling()
setNames(as.data.frame(acp$var$cos2), paste("qualité", 1:4)) %>%
round(2) %>%
# mutate_all(~cell_spec(round(.x,2), bold = .x > .25)) %>%
kable(escape = F, align = "r") %>%
kable_styling()
formattable(as.data.frame(apply(Titanic, c(1,4), sum)),
table.attr = "class=\"table table-condensed centering\"")
o = occupationalStatus %>%
data.frame() %>%
mutate(origin = paste0("orig=", origin),
destination = paste0("dest=", destination)) %>%
spread(destination, Freq) %>%
remove_rownames() %>%
column_to_rownames("origin")
affTable(as.data.frame(addmargins(as.matrix(o))))
p = 100 * prop.table(o)
affTable(as.data.frame(addmargins(as.matrix(p))))
pl = as.data.frame(100 * prop.table(as.matrix(o), margin = 1))
affTable(as.data.frame(addmargins(as.matrix(pl), 2)))
pc = as.data.frame(100 * prop.table(as.matrix(o), margin = 2))
affTable(as.data.frame(addmargins(as.matrix(pc), 1)))
library(FactoMineR)
ca = CA(o, graph = FALSE)
formattable(round(setNames(data.frame(ca$eig), c("Valeur propre", "Variance (%)", "Cumulée (%)")), 2), row.names = TRUE)
par(mar = c(2, 2, 1, 1) + .5)
barplot(ca$eig[,2])
plot(ca, invisible = "col")
plot(ca, invisible = "row")
plot(ca)
rowcontrib = setNames(as.data.frame(addmargins(ca$row$contrib, 1)),
paste("contrib", 1:5))
affTable(rowcontrib, ncol = 5)
rowcos2 = setNames(as.data.frame(addmargins(ca$row$cos2, 2)),
c(paste("qualité", 1:5), "Somme"))
affTable(rowcos2, ncol = 5)
colcontrib = setNames(as.data.frame(addmargins(ca$col$contrib, 1)),
paste("contrib", 1:5))
affTable(colcontrib, ncol = 5)
colcos2 = setNames(as.data.frame(addmargins(ca$col$cos2, 2)),
c(paste("qualité", 1:5), "Somme"))
affTable(colcos2, ncol = 5)
t = chisq.test(o)
t
formattable(cor(donnees))
formattable(cor(donnees), digits = 2) #%>%
formattable(cor(donnees), digits = 2, list(area(col = a:c) ~ color_tile("transparent", "pink"))) #%>%
formattable(cor(donnees), digits = 2, list(area(col = 4) ~ color_tile("transparent", "pink"))) #%>%
formattable(cor(donnees), digits = 2, list(~ color_tile("transparent", "pink"))) #%>%
formattable(cor(donnees), list(~ color_tile("transparent", "pink"))) #%>%
formattable(as.data.frame(cor(donnees)), list(~ color_tile("transparent", "pink"))) #%>%
formattable(as.data.frame(cor(donnees)),
list(~ color_tile("transparent", "pink")),
digits = 2) #%>%
formattable(as.data.frame(cor(donnees)),
list(~ color_tile("transparent", "gray")),
digits = 2) #%>%
formattable(as.data.frame(cor(donnees)),
list(~ color_tile("transparent", "gray")),
digits = 2)
setNames(as.data.frame(addmargins(acp$ind$contrib, 1)), paste("contrib", 1:4)) %>%
formattable(list(~ color_tile("transparent", "gray")), digits = 2)
setNames(as.data.frame(addmargins(acp$ind$contrib, 1)), paste("contrib", 1:4)) %>%
formattable(list(~ style(color = ifelse(change >= 100/9, "green", "red"))), digits = 2)
setNames(as.data.frame(addmargins(acp$ind$contrib, 1)), paste("contrib", 1:4)) %>%
formattable(list(~ style(color = ifelse(.x >= 100/9, "green", "red"))), digits = 2)
acp$ind$contrib %>%
formattable(list(~ style(color = ifelse(.x >= 100/9, "green", "red"))), digits = 2)
as.data.frame(acp$ind$contrib) %>%
formattable(list(~ style(color = ifelse(.x >= 100/9, "green", "red"))), digits = 2)
as.data.frame(acp$ind$contrib) %>%
formattable(list(~ color_tile("transparent", "gray")), digits = 2)
as.data.frame(acp$ind$cos2) %>%
formattable(list(~ color_tile("transparent", "gray")), digits = 2)
as.data.frame(acp$var$contrib) %>%
formattable(list(~ color_tile("transparent", "gray")), digits = 2)
as.data.frame(acp$var$cos2) %>%
formattable(list(~ color_tile("transparent", "gray")), digits = 2)
rowcontrib = setNames(as.data.frame(addmargins(acp$ind$contrib, 1)),
paste("contrib", 1:4))
affTable(rowcontrib, ncol = 4)
affTable(rowcontrib, nrow = 9, ncol = 4)
rowcontrib = setNames(as.data.frame(addmargins(acp$ind$co2, 1)),
paste("contrib", 1:4))
affTable(rowcontrib, nrow = 9, ncol = 4)
rowcontrib = setNames(as.data.frame(addmargins(acp$var$contrib, 1)),
paste("contrib", 1:4))
affTable(rowcontrib, nrow = 4, ncol = 4)
rowcontrib = setNames(as.data.frame(addmargins(acp$var$cos2, 1)),
paste("contrib", 1:4))
affTable(rowcontrib, nrow = 4, ncol = 4)
knitr::opts_chunk$set(echo = FALSE, fig.align = "center")
library(kableExtra)
library(tidyverse)
library(formattable)
affTable <- function (tab, nrow = 8, ncol = 8, digits = 2) {
formattable(
round(tab, digits),
list(
area(1:nrow, 1:ncol) ~ color_tile("transparent","lightblue")
)
)
}
knitr::include_graphics("https://upload.wikimedia.org/wikipedia/commons/6/64/Dualite.jpg")
donnees = read.table(text = "Etudiant & Math & Phys & Fran & Angl
jean &  6.00 &  6.00 &  5.00 &  5.50
alan &  8.00 &  8.00 &  8.00 &  8.00
anni &  6.00 &  7.00 & 11.00 &  9.50
moni & 14.50 & 14.50 & 15.50 & 15.00
didi & 14.00 & 14.00 & 12.00 & 12.50
andr & 11.00 & 10.00 &  5.50 &  7.00
pier &  5.50 &  7.00 & 14.00 & 11.50
brig & 13.00 & 12.50 &  8.50 &  9.50
evel &  9.00 &  9.50 & 12.50 & 12.00", sep = "&", header = T, row.names = 1)
knitr::kable(donnees, row.names = T)
knitr::kable(data.frame(Moyenne = apply(donnees, 2, mean),
Variance = apply(donnees, 2, var)),
digits = 2)
formattable(as.data.frame(cor(donnees)),
list(~ color_tile("transparent", "gray")),
digits = 2)
library(FactoMineR)
acp = PCA(donnees, graph = FALSE)
knitr::kable(round(setNames(data.frame(acp$eig), c("Valeur propre", "Variance (%)", "Cumulée (%)")), 2), row.names = TRUE)
par(mar = c(2, 2, 1, 1) + .5)
barplot(acp$eig[,2])
plot(acp)
plot(acp, choix = "var")
rowcontrib = setNames(as.data.frame(addmargins(acp$ind$contrib, 1)),
paste("contrib", 1:4))
affTable(rowcontrib, nrow = 9, ncol = 4)
rowcontrib = setNames(as.data.frame(addmargins(acp$ind$co2, 1)),
paste("contrib", 1:4))
rowcontrib = setNames(as.data.frame(addmargins(acp$ind$cos2, 1)),
paste("contrib", 1:4))
affTable(rowcontrib, nrow = 9, ncol = 4)
rowcos2 = setNames(as.data.frame(addmargins(acp$row$cos2, 2)),
c(paste("qualité", 1:9), "Somme"))
rowcos2 = setNames(as.data.frame(addmargins(acp$row$cos2, 2)),
c(paste("qualité", 1:4), "Somme"))
rowcos2 = setNames(as.data.frame(addmargins(acp$ind$cos2, 2)),
c(paste("qualité", 1:4), "Somme"))
affTable(rowcos2, nrow = 9, ncol = 4)
rowcos2 = setNames(as.data.frame(addmargins(acp$var$cos2, 2)),
c(paste("qualité", 1:4), "Somme"))
affTable(rowcos2, nrow = 9, ncol = 4)
rowcos2 = setNames(as.data.frame(addmargins(acp$var$cos2, 2)),
c(paste("qualité", 1:4), "Somme"))
affTable(rowcos2, nrow = 4, ncol = 4)
knitr::opts_chunk$set(echo = FALSE, fig.align = "center", fig.height = 5)
library(ggplot2)
library(dplyr)
library(kableExtra)
faithful %>%
ggplot(aes(waiting, eruptions)) +
geom_point() +
theme_classic()
res = kmeans(scale(faithful), 2)
faithful %>%
mutate(class = factor(res$cluster)) %>%
ggplot(aes(waiting, eruptions, color = class)) +
geom_point() +
theme_classic()
x = data.frame(v = c(1, 2, 4, 5.5, 7),
row.names = letters[1:5])
h = hclust(dist(x))
par(mar = c(0, 0, 0, 0))
plot(h, hang = -1, main = "", axes = FALSE, labels = FALSE, col = "gray50")
text(x = 1:5, y = 0, labels = row.names(x), srt = 0, adj = c(1,0), cex = 2)
f = sample(faithful)[1:20,]
k = kmeans(f, 2, nstart=20)
g = apply(f, 2, mean)
plot(f, pch=3, main="Sample data", ylab="Waiting", xlab="Eruptions")
points(g[1], g[2], col="blue", pch=15)
points(k$centers, col="red", pch=19)
legend("topleft", c("Cluster centers","Data center"),
pch=c(19,15), col=c("red","blue"), bty="n")
<<inertia1>>
par(mar = c(0, 0, 0, 0))
plot(hclust(dist(iris[-5]), "ward.D2"),
hang = -1, labels = FALSE, main = "", axes = FALSE)
abline(h = 22, lty = 2, col = "gray50")
text(150, 22, "en 2 classes", adj = c(1, -.5), col = "gray50", cex = 2.5)
abline(h = 9, lty = 2, col = "gray50")
text(150, 9, "en 3 classes", adj = c(1, -.5), col = "gray50", cex = 2.5)
par(mar = c(0, 0, 0, 0))
plot(hclust(dist(iris[-5]), "ward.D2"),
hang = -1, labels = FALSE, main = "", axes = FALSE)
abline(h = 22, lty = 2, col = "gray50")
text(150, 22, "en 2 classes", adj = c(1, -.5), col = "gray50", cex = 2.5)
abline(h = 9, lty = 2, col = "gray50")
text(150, 9, "en 3 classes", adj = c(1, -.5), col = "gray50", cex = 2.5)
par(mar = c(0, 0, 0, 0))
plot(hclust(dist(iris[-5]), "ward.D2"),
hang = -1, labels = FALSE, main = "", axes = FALSE)
abline(h = 22, lty = 2, col = "gray50")
text(150, 22, "en 2 classes", adj = c(1, -.5), col = "gray50", cex = 2.5)
abline(h = 9, lty = 2, col = "gray50")
text(150, 9, "en 3 classes", adj = c(1, -.5), col = "gray50", cex = 2.5)
res = lapply(1:20, function(k) return(kmeans(scale(iris[-5]), k, nstart = 20)))
r2 = sapply(res, function(r) return(r$betweenss / r$totss))
psf = sapply(res, function(r) {
r2 = r$betweenss / r$totss
k = length(r$size)
n = sum(r$size)
if (k == 1) return(NA)
(r2 / (k - 1)) / ((1 - r2) / (n - k))
})
data.frame(
k = rep(1:20, times = 2),
critere = rep(c("R2", "Pseudo-F"), each = 20),
valeur = c(r2, psf)
) %>%
ggplot(aes(k, valeur, color = critere)) +
geom_vline(xintercept = 3, lty = 2, color = "grey50") +
geom_line(show.legend = FALSE, size = 2) +
facet_wrap(~ critere, scales = "free") +
theme_classic()
